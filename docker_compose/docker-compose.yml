services:

#
# BASE DE DATOS
#
  database:
    restart: unless-stopped
    networks:
      my_network:
        ipv4_address: 172.20.0.2
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
      MONGO_INITDB_DATABASE: mydatabase
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

#
# MONGO CLUSTER REPLICANCIA
#
  mongo1:
    image: mongo:7
    hostname: mongo1
    container_name: mongo1
    networks:
      my_network:
        ipv4_address: 172.20.0.11
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
    entrypoint: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "localhost,mongo1"]

  mongo2:
    image: mongo:7
    hostname: mongo2
    container_name: mongo2
    networks:
      my_network:
        ipv4_address: 172.20.0.12
    ports:
      - "27019:27017"
    entrypoint: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "localhost,mongo2"]

  mongo3:
    image: mongo:7
    hostname: mongo3
    container_name: mongo3
    networks:
      my_network:
        ipv4_address: 172.20.0.13
    ports:
      - "27020:27017"
    entrypoint: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "localhost,mongo3"]

  mongosetup:
    image: mongo:7
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      my_network:
        ipv4_address: 172.20.0.14
    volumes:
      - ./scripts:/scripts
    entrypoint: [ "bash", "/scripts/mongo_setup.sh" ]

  
#
# MONGO EXPRESS
# Default user:password ==> admin:pass

  database_client:
    restart: unless-stopped
    networks:
      my_network:
        ipv4_address: 172.20.0.3
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/test?replicaSet=myReplicaSet
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: secret
    depends_on:
      - database


#
# BACKEND
#
  backend:
    image: manuudev/backend:latest
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    networks:
      my_network:
        ipv4_address: 172.20.0.4
    environment:
      PORT: 3000
      MONGO_URI: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/test?replicaSet=myReplicaSet
      SECRET_JWT_SEED: secret
    ports:
      - "8000:3000"
    depends_on:
      - database
#
# frontend
#
  frontend:
    image: manuudev/frontend:latest
    restart: unless-stopped
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    networks:
      my_network:
        ipv4_address: 172.20.0.5
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - backend

#
# data_restorer
#
  data_restorer: 
    image: mongo:7  
    networks: 
      my_network: 
        ipv4_address: 172.20.0.6
    volumes: 
      - ./dump:/dump 
    depends_on: 
      - mongo1
    entrypoint: ["/bin/sh", "-c", "mongorestore --uri mongodb://mongo1:27017,mongo2:27017,mongo3:27017/test?replicaSet=myReplicaSet --dir /dump"]

  #
# MONGODB_EXPORTER
#
  mongodb_exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb_exporter
    networks:
      my_network:
        ipv4_address: 172.20.0.9
    ports:
      - "9216:9216"
    environment:
      - MONGODB_URI=mongodb://root:secret@mongo1:27017
    command: ["--collect-all"]
    depends_on:
      - mongo1

#
# Mongodb_backup
#
  mongodb_backup:
    image: mongo:7
    container_name: mongodb_backup
    restart: unless-stopped
    networks:
      my_network:
        ipv4_address: 172.20.0.10
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - ./backups:/backups
    entrypoint: ["/bin/sh", "-c", "while true; do mongodump --uri=mongodb+srv://root:secret@database:27017 --out /backups/$(date +'%Y-%m-%d_%H-%M-%S'); sleep 86400; done"]
    depends_on:
      - database

#
# PROMETHEUS
#
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      my_network:
        ipv4_address: 172.20.0.7
    ports:
      - "9090:9090"
    volumes: 
      - ./prometheus.yml:/etc/prometheus/prometheus.yml 
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml' 
    depends_on:
      - mongodb_exporter

#
# GRAFANA
#
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      my_network:
        ipv4_address: 172.20.0.8
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


volumes:
  mongo-data:
    driver: local
  grafana-data:
    driver: local